package online.cszt0.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;

/**
 * @author 初始状态0
 * @date 2019/7/20 3:41
 */
public class GameFrameUI {
	JPanel chestPanel;
	JPanel contentPanel;
	JButton finishDeploy;
	JLabel oppositeLabel;
	JLabel informationLabel;
	JLabel myLabel;

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR call it in your
	 * code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		contentPanel = new JPanel();
		contentPanel.setLayout(new GridLayoutManager(5, 3, new Insets(0, 0, 0, 0), -1, -1));
		chestPanel = new JPanel();
		chestPanel.setLayout(new BorderLayout(0, 0));
		contentPanel.add(chestPanel, new GridConstraints(1, 0, 3, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(512, 720), new Dimension(512, 720), new Dimension(512, 720), 0, false));
		finishDeploy = new JButton();
		finishDeploy.setText("完成部署");
		contentPanel.add(finishDeploy, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		contentPanel.add(spacer1, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		oppositeLabel = new JLabel();
		Font oppositeLabelFont = this.$$$getFont$$$(null, -1, 24, oppositeLabel.getFont());
		if (oppositeLabelFont != null) oppositeLabel.setFont(oppositeLabelFont);
		oppositeLabel.setText("");
		contentPanel.add(oppositeLabel, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, 250), null, 0, false));
		myLabel = new JLabel();
		Font myLabelFont = this.$$$getFont$$$(null, -1, 24, myLabel.getFont());
		if (myLabelFont != null) myLabel.setFont(myLabelFont);
		myLabel.setText("");
		contentPanel.add(myLabel, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, 250), null, 0, false));
		informationLabel = new JLabel();
		Font informationLabelFont = this.$$$getFont$$$(null, -1, 18, informationLabel.getFont());
		if (informationLabelFont != null) informationLabel.setFont(informationLabelFont);
		informationLabel.setText("");
		contentPanel.add(informationLabel, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, 220), null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
		if (currentFont == null) return null;
		String resultName;
		if (fontName == null) {
			resultName = currentFont.getName();
		} else {
			Font testFont = new Font(fontName, Font.PLAIN, 10);
			if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
				resultName = fontName;
			} else {
				resultName = currentFont.getName();
			}
		}
		return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPanel;
	}

}
